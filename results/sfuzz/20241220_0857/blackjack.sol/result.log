Extract contract BlackJack from /sb/blackjack.sol
Extract contract Deck from /sb/blackjack.sol
Extracted 2 contract(s) from /sb/blackjack.sol
[0;32m> Created "fuzzMe"[0m
[0;32m> To fuzz contracts:[0m
  chmod +x fuzzMe
  ./fuzzMe
contracts/Deck.sol:70:4: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
			throw; // game doesn't exist or already finished
			^---^
contracts/Deck.sol:91:2: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
	function BlackJack() {
 ^ (Relevant source part starts here and spans across multiple lines).
contracts/Deck.sol:102:4: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
			throw; // game is already going on
			^---^
contracts/Deck.sol:106:4: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
			throw; // incorrect bet
			^---^
contracts/Deck.sol:144:8: Warning: Use of the "var" keyword is deprecated.
		var (houseScore, houseScoreBig) = calculateScore(games[msg.sender].houseCards);
		     ^--------^
contracts/Deck.sol:144:20: Warning: Use of the "var" keyword is deprecated.
		var (houseScore, houseScoreBig) = calculateScore(games[msg.sender].houseCards);
		                 ^-----------^
contracts/Deck.sol:161:8: Warning: Use of the "var" keyword is deprecated.
		var (houseScore, houseScoreBig) = calculateScore(game.houseCards);
		     ^--------^
contracts/Deck.sol:161:20: Warning: Use of the "var" keyword is deprecated.
		var (houseScore, houseScoreBig) = calculateScore(game.houseCards);
		                 ^-----------^
contracts/Deck.sol:163:8: Warning: Use of the "var" keyword is deprecated.
		var (playerScore, playerScoreBig) = calculateScore(game.playerCards);
		     ^---------^
contracts/Deck.sol:163:21: Warning: Use of the "var" keyword is deprecated.
		var (playerScore, playerScoreBig) = calculateScore(game.playerCards);
		                  ^------------^
contracts/Deck.sol:170:37: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
				if (!msg.sender.send(game.bet)) throw; // return bet to the player
				                                ^---^
contracts/Deck.sol:183:48: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
					if (!msg.sender.send((game.bet * 5) / 2)) throw; // send prize to the player
					                                          ^---^
contracts/Deck.sol:186:42: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
					if (!msg.sender.send(game.bet * 2)) throw; // send prize to the player
					                                    ^---^
contracts/Deck.sol:223:43: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
						if (!msg.sender.send(game.bet * 2)) throw; // send prize to the player
						                                    ^---^
contracts/Deck.sol:236:38: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
					if (!msg.sender.send(game.bet)) throw; // return bet to the player
					                                ^---^
contracts/Deck.sol:240:42: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
					if (!msg.sender.send(game.bet * 2)) throw; // send prize to the player
					                                    ^---^
contracts/Deck.sol:268:4: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
			throw;
			^---^
contracts/Deck.sol:275:4: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
			throw;
			^---^
contracts/Deck.sol:290:4: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
			throw; // game doesn't exist
			^---^
contracts/Deck.sol:293:3: Warning: Variable is declared as a storage pointer. Use an explicit "storage" keyword to silence this warning.
		Game game = games[msg.sender];
		^-------^
contracts/Deck.sol:21:24: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
		return uint8(uint256(keccak256(block.blockhash(b), player, cardNumber, timestamp)) % 52);
		                     ^----------------------------------------------------------^
contracts/Deck.sol:114:3: Warning: Invoking events without "emit" prefix is deprecated.
		Deal(true, playerCards[0]);
		^------------------------^
contracts/Deck.sol:116:3: Warning: Invoking events without "emit" prefix is deprecated.
		Deal(false, houseCards[0]);
		^------------------------^
contracts/Deck.sol:118:3: Warning: Invoking events without "emit" prefix is deprecated.
		Deal(true, playerCards[1]);
		^------------------------^
contracts/Deck.sol:137:3: Warning: Invoking events without "emit" prefix is deprecated.
		Deal(true, games[msg.sender].playerCards[games[msg.sender].playerCards.length - 1]);
		^---------------------------------------------------------------------------------^
contracts/Deck.sol:152:4: Warning: Invoking events without "emit" prefix is deprecated.
			Deal(false, newCard);
			^------------------^
contracts/Deck.sol:165:3: Warning: Invoking events without "emit" prefix is deprecated.
		GameStatus(houseScore, houseScoreBig, playerScore, playerScoreBig);
		^----------------------------------------------------------------^
contracts/Deck.sol:194:6: Warning: Invoking events without "emit" prefix is deprecated.
					Log(1);
					^----^
contracts/Deck.sol:21:34: Warning: "block.blockhash()" has been deprecated in favor of "blockhash()"
		return uint8(uint256(keccak256(block.blockhash(b), player, cardNumber, timestamp)) % 52);
		                               ^-------------^
contracts/Deck.sol:91:2: Warning: No visibility specified. Defaulting to "public". 
	function BlackJack() {
 ^ (Relevant source part starts here and spans across multiple lines).
contracts/Deck.sol:95:2: Warning: No visibility specified. Defaulting to "public". 
	function () payable {
 ^ (Relevant source part starts here and spans across multiple lines).
contracts/Deck.sol:144:8: Warning: Unused local variable.
		var (houseScore, houseScoreBig) = calculateScore(games[msg.sender].houseCards);
		     ^--------^
contracts/Deck.sol:15:2: Warning: Function state mutability can be restricted to view
	function deal(address player, uint8 cardNumber) internal returns (uint8) {
 ^ (Relevant source part starts here and spans across multiple lines).
contracts/Deck.sol:24:2: Warning: Function state mutability can be restricted to pure
	function valueOf(uint8 card, bool isBigAce) internal constant returns (uint8) {
 ^ (Relevant source part starts here and spans across multiple lines).
contracts/Deck.sol:35:2: Warning: Function state mutability can be restricted to pure
	function isAce(uint8 card) internal constant returns (bool) {
 ^ (Relevant source part starts here and spans across multiple lines).
contracts/Deck.sol:39:2: Warning: Function state mutability can be restricted to pure
	function isTen(uint8 card) internal constant returns (bool) {
 ^ (Relevant source part starts here and spans across multiple lines).
contracts/BlackJack.sol:70:4: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
			throw; // game doesn't exist or already finished
			^---^
contracts/BlackJack.sol:91:2: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
	function BlackJack() {
 ^ (Relevant source part starts here and spans across multiple lines).
contracts/BlackJack.sol:102:4: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
			throw; // game is already going on
			^---^
contracts/BlackJack.sol:106:4: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
			throw; // incorrect bet
			^---^
contracts/BlackJack.sol:144:8: Warning: Use of the "var" keyword is deprecated.
		var (houseScore, houseScoreBig) = calculateScore(games[msg.sender].houseCards);
		     ^--------^
contracts/BlackJack.sol:144:20: Warning: Use of the "var" keyword is deprecated.
		var (houseScore, houseScoreBig) = calculateScore(games[msg.sender].houseCards);
		                 ^-----------^
contracts/BlackJack.sol:161:8: Warning: Use of the "var" keyword is deprecated.
		var (houseScore, houseScoreBig) = calculateScore(game.houseCards);
		     ^--------^
contracts/BlackJack.sol:161:20: Warning: Use of the "var" keyword is deprecated.
		var (houseScore, houseScoreBig) = calculateScore(game.houseCards);
		                 ^-----------^
contracts/BlackJack.sol:163:8: Warning: Use of the "var" keyword is deprecated.
		var (playerScore, playerScoreBig) = calculateScore(game.playerCards);
		     ^---------^
contracts/BlackJack.sol:163:21: Warning: Use of the "var" keyword is deprecated.
		var (playerScore, playerScoreBig) = calculateScore(game.playerCards);
		                  ^------------^
contracts/BlackJack.sol:170:37: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
				if (!msg.sender.send(game.bet)) throw; // return bet to the player
				                                ^---^
contracts/BlackJack.sol:183:48: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
					if (!msg.sender.send((game.bet * 5) / 2)) throw; // send prize to the player
					                                          ^---^
contracts/BlackJack.sol:186:42: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
					if (!msg.sender.send(game.bet * 2)) throw; // send prize to the player
					                                    ^---^
contracts/BlackJack.sol:223:43: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
						if (!msg.sender.send(game.bet * 2)) throw; // send prize to the player
						                                    ^---^
contracts/BlackJack.sol:236:38: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
					if (!msg.sender.send(game.bet)) throw; // return bet to the player
					                                ^---^
contracts/BlackJack.sol:240:42: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
					if (!msg.sender.send(game.bet * 2)) throw; // send prize to the player
					                                    ^---^
contracts/BlackJack.sol:268:4: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
			throw;
			^---^
contracts/BlackJack.sol:275:4: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
			throw;
			^---^
contracts/BlackJack.sol:290:4: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
			throw; // game doesn't exist
			^---^
contracts/BlackJack.sol:293:3: Warning: Variable is declared as a storage pointer. Use an explicit "storage" keyword to silence this warning.
		Game game = games[msg.sender];
		^-------^
contracts/BlackJack.sol:21:24: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
		return uint8(uint256(keccak256(block.blockhash(b), player, cardNumber, timestamp)) % 52);
		                     ^----------------------------------------------------------^
contracts/BlackJack.sol:114:3: Warning: Invoking events without "emit" prefix is deprecated.
		Deal(true, playerCards[0]);
		^------------------------^
contracts/BlackJack.sol:116:3: Warning: Invoking events without "emit" prefix is deprecated.
		Deal(false, houseCards[0]);
		^------------------------^
contracts/BlackJack.sol:118:3: Warning: Invoking events without "emit" prefix is deprecated.
		Deal(true, playerCards[1]);
		^------------------------^
contracts/BlackJack.sol:137:3: Warning: Invoking events without "emit" prefix is deprecated.
		Deal(true, games[msg.sender].playerCards[games[msg.sender].playerCards.length - 1]);
		^---------------------------------------------------------------------------------^
contracts/BlackJack.sol:152:4: Warning: Invoking events without "emit" prefix is deprecated.
			Deal(false, newCard);
			^------------------^
contracts/BlackJack.sol:165:3: Warning: Invoking events without "emit" prefix is deprecated.
		GameStatus(houseScore, houseScoreBig, playerScore, playerScoreBig);
		^----------------------------------------------------------------^
contracts/BlackJack.sol:194:6: Warning: Invoking events without "emit" prefix is deprecated.
					Log(1);
					^----^
contracts/BlackJack.sol:21:34: Warning: "block.blockhash()" has been deprecated in favor of "blockhash()"
		return uint8(uint256(keccak256(block.blockhash(b), player, cardNumber, timestamp)) % 52);
		                               ^-------------^
contracts/BlackJack.sol:91:2: Warning: No visibility specified. Defaulting to "public". 
	function BlackJack() {
 ^ (Relevant source part starts here and spans across multiple lines).
contracts/BlackJack.sol:95:2: Warning: No visibility specified. Defaulting to "public". 
	function () payable {
 ^ (Relevant source part starts here and spans across multiple lines).
contracts/BlackJack.sol:144:8: Warning: Unused local variable.
		var (houseScore, houseScoreBig) = calculateScore(games[msg.sender].houseCards);
		     ^--------^
contracts/BlackJack.sol:15:2: Warning: Function state mutability can be restricted to view
	function deal(address player, uint8 cardNumber) internal returns (uint8) {
 ^ (Relevant source part starts here and spans across multiple lines).
contracts/BlackJack.sol:24:2: Warning: Function state mutability can be restricted to pure
	function valueOf(uint8 card, bool isBigAce) internal constant returns (uint8) {
 ^ (Relevant source part starts here and spans across multiple lines).
contracts/BlackJack.sol:35:2: Warning: Function state mutability can be restricted to pure
	function isAce(uint8 card) internal constant returns (bool) {
 ^ (Relevant source part starts here and spans across multiple lines).
contracts/BlackJack.sol:39:2: Warning: Function state mutability can be restricted to pure
	function isTen(uint8 card) internal constant returns (bool) {
 ^ (Relevant source part starts here and spans across multiple lines).
assets/NormalAttacker.sol:5:3: Warning: No visibility specified. Defaulting to "public". 
  function() payable {
  ^ (Relevant source part starts here and spans across multiple lines).
assets/ReentrancyAttacker.sol:8:7: Warning: Return value of low-level calls not used.
      msg.sender.call(bytes4(255));
      ^--------------------------^
assets/ReentrancyAttacker.sol:5:3: Warning: No visibility specified. Defaulting to "public". 
  function() payable {
  ^ (Relevant source part starts here and spans across multiple lines).
>> Fuzz Deck
** Write stats: 0.001797
** Write stats: 5.00503
** Write stats: 10
** Write stats: 15
** Write stats: 20.0001
** Write stats: 25.0001
** Write stats: 30.0001
** Write stats: 35.0001
** Write stats: 40.0001
** Write stats: 45
** Write stats: 55.0001
** Write stats: 60
** Write stats: 65
** Write stats: 70.0001
** Write stats: 75
** Write stats: 80.0001
** Write stats: 85.0002
** Write stats: 90.0001
** Write stats: 95.0001
** Write stats: 100
** Write stats: 105
** Write stats: 110.005
** Write stats: 115
** Write stats: 120
** Write stats: 125
** Write stats: 130
** Write stats: 135
** Write stats: 140
** Write stats: 145
** Write stats: 150
** Write stats: 155
** Write stats: 160
** Write stats: 165
** Write stats: 170
** Write stats: 175
** Write stats: 180
** Write stats: 185
** Write stats: 190
** Write stats: 195
** Write stats: 200
** Write stats: 210
** Write stats: 215
** Write stats: 220
** Write stats: 225
** Write stats: 230
** Write stats: 235
** Write stats: 240
** Write stats: 245
** Write stats: 250
** Write stats: 255
** Write stats: 260
** Write stats: 265
** Write stats: 270
** Write stats: 275
** Write stats: 280
** Write stats: 285
** Write stats: 290
** Write stats: 295
** Write stats: 298
>> Fuzz BlackJack
** Write stats: 0.005967
** Write stats: 5.00022
** Write stats: 10.0001
** Write stats: 15.0002
** Write stats: 20.0007
** Write stats: 25.0003
** Write stats: 30.0055
** Write stats: 35.0004
** Write stats: 40.0004
** Write stats: 45.0004
** Write stats: 50.0003
** Write stats: 55.0006
** Write stats: 60.0008
** Write stats: 65.0005
** Write stats: 70.0003
** Write stats: 75.0004
** Write stats: 80.0007
** Write stats: 85.0009
** Write stats: 90.0007
** Write stats: 95.0008
** Write stats: 100.001
** Write stats: 105.001
** Write stats: 110.001
** Write stats: 115
** Write stats: 120
** Write stats: 125.006
** Write stats: 130.016
** Write stats: 135.002
** Write stats: 140.002
** Write stats: 145.018
** Write stats: 150.006
** Write stats: 155.015
** Write stats: 160.013
** Write stats: 165.006
** Write stats: 170.006
** Write stats: 175.019
** Write stats: 180.027
** Write stats: 185.037
** Write stats: 190.038
** Write stats: 195.041
** Write stats: 200.018
** Write stats: 205.033
** Write stats: 210.004
** Write stats: 215.04
** Write stats: 220.044
** Write stats: 225.048
** Write stats: 230.024
** Write stats: 235.023
** Write stats: 240.041
** Write stats: 245.014
** Write stats: 250.011
** Write stats: 255.026
** Write stats: 260.017
** Write stats: 265.002
** Write stats: 270.046
** Write stats: 275.033
** Write stats: 280.026
** Write stats: 285.037
** Write stats: 290.019
** Write stats: 295.062
** Write stats: 298.061
