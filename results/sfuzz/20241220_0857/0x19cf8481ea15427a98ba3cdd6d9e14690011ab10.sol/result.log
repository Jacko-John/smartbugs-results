Extract contract SafeMath from /sb/0x19cf8481ea15427a98ba3cdd6d9e14690011ab10.sol
Extract contract StandardToken from /sb/0x19cf8481ea15427a98ba3cdd6d9e14690011ab10.sol
Extract contract daoPOLSKAtokens from /sb/0x19cf8481ea15427a98ba3cdd6d9e14690011ab10.sol
Extracted 3 contract(s) from /sb/0x19cf8481ea15427a98ba3cdd6d9e14690011ab10.sol
[0;32m> Created "fuzzMe"[0m
[0;32m> To fuzz contracts:[0m
  chmod +x fuzzMe
  ./fuzzMe
contracts/daoPOLSKAtokens.sol:77:7: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
      throw;
      ^---^
contracts/daoPOLSKAtokens.sol:134:64: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;
                                                               ^---^
contracts/daoPOLSKAtokens.sol:204:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
  function daoPOLSKAtokens() {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/daoPOLSKAtokens.sol:211:7: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
      throw;
      ^---^
contracts/daoPOLSKAtokens.sol:214:7: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
      throw;
      ^---^
contracts/daoPOLSKAtokens.sol:223:7: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
      throw;
      ^---^
contracts/daoPOLSKAtokens.sol:226:7: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
      throw;
      ^---^
contracts/daoPOLSKAtokens.sol:330:10: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
		} else throw;
		       ^---^
contracts/daoPOLSKAtokens.sol:341:7: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
      throw;
      ^---^
contracts/daoPOLSKAtokens.sol:352:7: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
      throw;
      ^---^
contracts/daoPOLSKAtokens.sol:368:3: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
		throw;
		^---^
contracts/daoPOLSKAtokens.sol:389:23: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (!funding) throw;
                      ^---^
contracts/daoPOLSKAtokens.sol:392:29: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (msg.value == 0) throw;
                            ^---^
contracts/daoPOLSKAtokens.sol:395:11: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
          throw;
          ^---^
contracts/daoPOLSKAtokens.sol:403:3: Warning: Use of the "var" keyword is deprecated.
	 var numTokensRAW = msg.value;
	 ^--------------^
contracts/daoPOLSKAtokens.sol:405:9: Warning: Use of the "var" keyword is deprecated.
        var numTokens = msg.value * CreationRate;
        ^-----------^
contracts/daoPOLSKAtokens.sol:432:20: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
	if(funding==true) throw;
	                  ^---^
contracts/daoPOLSKAtokens.sol:433:36: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
		 	if (!owner.send(this.balance)) throw;
		 	                               ^---^
contracts/daoPOLSKAtokens.sol:437:33: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
	      if (msg.sender != owner) throw;
	                               ^---^
contracts/daoPOLSKAtokens.sol:442:33: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
	      if (msg.sender != owner) throw;
	                               ^---^
contracts/daoPOLSKAtokens.sol:447:33: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
	      if (msg.sender != owner) throw;
	                               ^---^
contracts/daoPOLSKAtokens.sol:451:43: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
	      if (msg.sender != migrationMaster) throw;
	                                         ^---^
contracts/daoPOLSKAtokens.sol:458:56: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (block.number <= fundingEndBlock+8*oneweek) throw;
                                                       ^---^
contracts/daoPOLSKAtokens.sol:469:27: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (migratestate) throw;
                          ^---^
contracts/daoPOLSKAtokens.sol:473:26: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (_value == 0) throw;
                         ^---^
contracts/daoPOLSKAtokens.sol:474:44: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (_value > balances[msg.sender]) throw;
                                           ^---^
contracts/daoPOLSKAtokens.sol:485:22: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (funding) throw;
                     ^---^
contracts/daoPOLSKAtokens.sol:486:27: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (!refundstate) throw;
                          ^---^
contracts/daoPOLSKAtokens.sol:488:9: Warning: Use of the "var" keyword is deprecated.
        var DAOPLTokenValue = balances[msg.sender];
        ^-----------------^
contracts/daoPOLSKAtokens.sol:489:9: Warning: Use of the "var" keyword is deprecated.
        var ETHValue = balancesRAW[msg.sender];
        ^----------^
contracts/daoPOLSKAtokens.sol:490:28: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (ETHValue == 0) throw;
                           ^---^
contracts/daoPOLSKAtokens.sol:75:3: Warning: This declaration shadows a builtin symbol.
  function assert(bool assertion) internal {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/daoPOLSKAtokens.sol:370:3: Warning: Variable is declared as a storage pointer. Use an explicit "storage" keyword to silence this warning.
		sendTokenAway t = transfers[numTransfers];
		^-------------^
contracts/daoPOLSKAtokens.sol:9:28: Warning: Functions in interfaces should be declared external.
interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }
                           ^-----------------------------------------------------------------------------------------------^
contracts/daoPOLSKAtokens.sol:110:5: Warning: Invoking events without "emit" prefix is deprecated.
    Transfer(msg.sender, _to, _value);
    ^-------------------------------^
contracts/daoPOLSKAtokens.sol:120:5: Warning: Invoking events without "emit" prefix is deprecated.
    Transfer(_from, _to, _value);
    ^--------------------------^
contracts/daoPOLSKAtokens.sol:137:5: Warning: Invoking events without "emit" prefix is deprecated.
    Approval(msg.sender, _spender, _value);
    ^------------------------------------^
contracts/daoPOLSKAtokens.sol:263:9: Warning: Invoking events without "emit" prefix is deprecated.
        Burn(msg.sender, _value);
        ^----------------------^
contracts/daoPOLSKAtokens.sol:281:9: Warning: Invoking events without "emit" prefix is deprecated.
        Burn(_from, _value);
        ^-----------------^
contracts/daoPOLSKAtokens.sol:293:7: Warning: Invoking events without "emit" prefix is deprecated.
      Transfer(msg.sender, _to, _value);
      ^-------------------------------^
contracts/daoPOLSKAtokens.sol:305:7: Warning: Invoking events without "emit" prefix is deprecated.
      Transfer(_from, _to, _value);
      ^--------------------------^
contracts/daoPOLSKAtokens.sol:316:5: Warning: Invoking events without "emit" prefix is deprecated.
    Approval(msg.sender, _spender, _value);
    ^------------------------------------^
contracts/daoPOLSKAtokens.sol:328:9: Warning: Invoking events without "emit" prefix is deprecated.
        receivedEther(msg.sender, msg.value);
        ^----------------------------------^
contracts/daoPOLSKAtokens.sol:346:5: Warning: Invoking events without "emit" prefix is deprecated.
    UpdatedTokenInformation(name, symbol);
    ^-----------------------------------^
contracts/daoPOLSKAtokens.sol:412:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(0, holder, numTokens);
        ^----------------------------^
contracts/daoPOLSKAtokens.sol:421:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(0, migrationMaster, additionalTokens);
        ^--------------------------------------------^
contracts/daoPOLSKAtokens.sol:433:21: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
		 	if (!owner.send(this.balance)) throw;
		 	                ^----------^
contracts/daoPOLSKAtokens.sol:439:20: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
        owner.send(this.balance - SubX);
                   ^----------^
contracts/daoPOLSKAtokens.sol:439:9: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
        owner.send(this.balance - SubX);
        ^-----------------------------^
contracts/daoPOLSKAtokens.sol:465:14: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
		owner.send(this.balance);
		           ^----------^
contracts/daoPOLSKAtokens.sol:465:3: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
		owner.send(this.balance);
		^----------------------^
contracts/daoPOLSKAtokens.sol:480:9: Warning: Invoking events without "emit" prefix is deprecated.
        Migrate(msg.sender, migrationAgent, _value);
        ^-----------------------------------------^
contracts/daoPOLSKAtokens.sol:494:9: Warning: Invoking events without "emit" prefix is deprecated.
        Refund(msg.sender, ETHValue);
        ^--------------------------^
contracts/daoPOLSKAtokens.sol:14:5: Warning: No visibility specified. Defaulting to "public". 
    function migrateFrom(address _from, uint256 _value);
    ^--------------------------------------------------^
contracts/daoPOLSKAtokens.sol:19:3: Warning: No visibility specified. Defaulting to "public". 
  function balanceOf(address who) constant returns (uint);
  ^------------------------------------------------------^
contracts/daoPOLSKAtokens.sol:20:3: Warning: No visibility specified. Defaulting to "public". 
  function allowance(address owner, address spender) constant returns (uint);
  ^-------------------------------------------------------------------------^
contracts/daoPOLSKAtokens.sol:22:3: Warning: No visibility specified. Defaulting to "public". 
  function transfer(address to, uint value) returns (bool ok);
  ^----------------------------------------------------------^
contracts/daoPOLSKAtokens.sol:23:3: Warning: No visibility specified. Defaulting to "public". 
  function transferFrom(address from, address to, uint value) returns (bool ok);
  ^----------------------------------------------------------------------------^
contracts/daoPOLSKAtokens.sol:24:3: Warning: No visibility specified. Defaulting to "public". 
  function approve(address spender, uint value) returns (bool ok);
  ^--------------------------------------------------------------^
contracts/daoPOLSKAtokens.sol:107:3: Warning: No visibility specified. Defaulting to "public". 
  function transfer(address _to, uint _value) returns (bool success) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/daoPOLSKAtokens.sol:114:3: Warning: No visibility specified. Defaulting to "public". 
  function transferFrom(address _from, address _to, uint _value) returns (bool success) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/daoPOLSKAtokens.sol:124:3: Warning: No visibility specified. Defaulting to "public". 
  function balanceOf(address _owner) constant returns (uint balance) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/daoPOLSKAtokens.sol:128:3: Warning: No visibility specified. Defaulting to "public". 
  function approve(address _spender, uint _value) returns (bool success) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/daoPOLSKAtokens.sol:141:3: Warning: No visibility specified. Defaulting to "public". 
  function allowance(address _owner, address _spender) constant returns (uint remaining) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/daoPOLSKAtokens.sol:204:3: Warning: No visibility specified. Defaulting to "public". 
  function daoPOLSKAtokens() {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/daoPOLSKAtokens.sol:285:3: Warning: No visibility specified. Defaulting to "public". 
  function transfer(address _to, uint256 _value) returns (bool success) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/daoPOLSKAtokens.sol:298:3: Warning: No visibility specified. Defaulting to "public". 
  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/daoPOLSKAtokens.sol:310:3: Warning: No visibility specified. Defaulting to "public". 
  function balanceOf(address _owner) constant returns (uint256 balance) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/daoPOLSKAtokens.sol:314:3: Warning: No visibility specified. Defaulting to "public". 
  function approve(address _spender, uint256 _value) returns (bool success) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/daoPOLSKAtokens.sol:320:3: Warning: No visibility specified. Defaulting to "public". 
  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/daoPOLSKAtokens.sol:338:3: Warning: No visibility specified. Defaulting to "public". 
  function setTokenInformation(string _name, string _symbol) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/daoPOLSKAtokens.sol:349:1: Warning: No visibility specified. Defaulting to "public". 
function setChainsAddresses(address chainAd, int chainnumber) {
^ (Relevant source part starts here and spans across multiple lines).
contracts/daoPOLSKAtokens.sol:366:2: Warning: No visibility specified. Defaulting to "public". 
	function sendTokenAw(address StandardTokenAddress, address receiver, uint amount){
 ^ (Relevant source part starts here and spans across multiple lines).
contracts/daoPOLSKAtokens.sol:387:9: Warning: No visibility specified. Defaulting to "public". 
        function createDaoPOLSKAtokens(address holder) payable {
        ^ (Relevant source part starts here and spans across multiple lines).
contracts/daoPOLSKAtokens.sol:424:2: Warning: No visibility specified. Defaulting to "public". 
	function setBonusCreationRate(uint newRate){
 ^ (Relevant source part starts here and spans across multiple lines).
contracts/daoPOLSKAtokens.sol:59:3: Warning: Function state mutability can be restricted to pure
  function max64(uint64 a, uint64 b) internal constant returns (uint64) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/daoPOLSKAtokens.sol:63:3: Warning: Function state mutability can be restricted to pure
  function min64(uint64 a, uint64 b) internal constant returns (uint64) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/daoPOLSKAtokens.sol:67:3: Warning: Function state mutability can be restricted to pure
  function max256(uint256 a, uint256 b) internal constant returns (uint256) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/daoPOLSKAtokens.sol:71:3: Warning: Function state mutability can be restricted to pure
  function min256(uint256 a, uint256 b) internal constant returns (uint256) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/daoPOLSKAtokens.sol:75:3: Warning: Function state mutability can be restricted to pure
  function assert(bool assertion) internal {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/daoPOLSKAtokens.sol:103:3: Warning: Function state mutability can be restricted to pure
  function isToken() public constant returns (bool weAre) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/daoPOLSKAtokens.sol:360:3: Warning: Function state mutability can be restricted to pure
  function DAOPolskaTokenICOregulations() external returns(string wow) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/daoPOLSKAtokens.sol:498:1: Warning: Function state mutability can be restricted to pure
function preICOregulations() external returns(string wow) {
^ (Relevant source part starts here and spans across multiple lines).
contracts/StandardToken.sol:77:7: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
      throw;
      ^---^
contracts/StandardToken.sol:134:64: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;
                                                               ^---^
contracts/StandardToken.sol:204:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
  function daoPOLSKAtokens() {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/StandardToken.sol:211:7: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
      throw;
      ^---^
contracts/StandardToken.sol:214:7: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
      throw;
      ^---^
contracts/StandardToken.sol:223:7: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
      throw;
      ^---^
contracts/StandardToken.sol:226:7: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
      throw;
      ^---^
contracts/StandardToken.sol:330:10: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
		} else throw;
		       ^---^
contracts/StandardToken.sol:341:7: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
      throw;
      ^---^
contracts/StandardToken.sol:352:7: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
      throw;
      ^---^
contracts/StandardToken.sol:368:3: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
		throw;
		^---^
contracts/StandardToken.sol:389:23: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (!funding) throw;
                      ^---^
contracts/StandardToken.sol:392:29: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (msg.value == 0) throw;
                            ^---^
contracts/StandardToken.sol:395:11: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
          throw;
          ^---^
contracts/StandardToken.sol:403:3: Warning: Use of the "var" keyword is deprecated.
	 var numTokensRAW = msg.value;
	 ^--------------^
contracts/StandardToken.sol:405:9: Warning: Use of the "var" keyword is deprecated.
        var numTokens = msg.value * CreationRate;
        ^-----------^
contracts/StandardToken.sol:432:20: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
	if(funding==true) throw;
	                  ^---^
contracts/StandardToken.sol:433:36: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
		 	if (!owner.send(this.balance)) throw;
		 	                               ^---^
contracts/StandardToken.sol:437:33: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
	      if (msg.sender != owner) throw;
	                               ^---^
contracts/StandardToken.sol:442:33: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
	      if (msg.sender != owner) throw;
	                               ^---^
contracts/StandardToken.sol:447:33: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
	      if (msg.sender != owner) throw;
	                               ^---^
contracts/StandardToken.sol:451:43: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
	      if (msg.sender != migrationMaster) throw;
	                                         ^---^
contracts/StandardToken.sol:458:56: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (block.number <= fundingEndBlock+8*oneweek) throw;
                                                       ^---^
contracts/StandardToken.sol:469:27: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (migratestate) throw;
                          ^---^
contracts/StandardToken.sol:473:26: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (_value == 0) throw;
                         ^---^
contracts/StandardToken.sol:474:44: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (_value > balances[msg.sender]) throw;
                                           ^---^
contracts/StandardToken.sol:485:22: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (funding) throw;
                     ^---^
contracts/StandardToken.sol:486:27: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (!refundstate) throw;
                          ^---^
contracts/StandardToken.sol:488:9: Warning: Use of the "var" keyword is deprecated.
        var DAOPLTokenValue = balances[msg.sender];
        ^-----------------^
contracts/StandardToken.sol:489:9: Warning: Use of the "var" keyword is deprecated.
        var ETHValue = balancesRAW[msg.sender];
        ^----------^
contracts/StandardToken.sol:490:28: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (ETHValue == 0) throw;
                           ^---^
contracts/StandardToken.sol:75:3: Warning: This declaration shadows a builtin symbol.
  function assert(bool assertion) internal {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/StandardToken.sol:370:3: Warning: Variable is declared as a storage pointer. Use an explicit "storage" keyword to silence this warning.
		sendTokenAway t = transfers[numTransfers];
		^-------------^
contracts/StandardToken.sol:9:28: Warning: Functions in interfaces should be declared external.
interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }
                           ^-----------------------------------------------------------------------------------------------^
contracts/StandardToken.sol:110:5: Warning: Invoking events without "emit" prefix is deprecated.
    Transfer(msg.sender, _to, _value);
    ^-------------------------------^
contracts/StandardToken.sol:120:5: Warning: Invoking events without "emit" prefix is deprecated.
    Transfer(_from, _to, _value);
    ^--------------------------^
contracts/StandardToken.sol:137:5: Warning: Invoking events without "emit" prefix is deprecated.
    Approval(msg.sender, _spender, _value);
    ^------------------------------------^
contracts/StandardToken.sol:263:9: Warning: Invoking events without "emit" prefix is deprecated.
        Burn(msg.sender, _value);
        ^----------------------^
contracts/StandardToken.sol:281:9: Warning: Invoking events without "emit" prefix is deprecated.
        Burn(_from, _value);
        ^-----------------^
contracts/StandardToken.sol:293:7: Warning: Invoking events without "emit" prefix is deprecated.
      Transfer(msg.sender, _to, _value);
      ^-------------------------------^
contracts/StandardToken.sol:305:7: Warning: Invoking events without "emit" prefix is deprecated.
      Transfer(_from, _to, _value);
      ^--------------------------^
contracts/StandardToken.sol:316:5: Warning: Invoking events without "emit" prefix is deprecated.
    Approval(msg.sender, _spender, _value);
    ^------------------------------------^
contracts/StandardToken.sol:328:9: Warning: Invoking events without "emit" prefix is deprecated.
        receivedEther(msg.sender, msg.value);
        ^----------------------------------^
contracts/StandardToken.sol:346:5: Warning: Invoking events without "emit" prefix is deprecated.
    UpdatedTokenInformation(name, symbol);
    ^-----------------------------------^
contracts/StandardToken.sol:412:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(0, holder, numTokens);
        ^----------------------------^
contracts/StandardToken.sol:421:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(0, migrationMaster, additionalTokens);
        ^--------------------------------------------^
contracts/StandardToken.sol:433:21: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
		 	if (!owner.send(this.balance)) throw;
		 	                ^----------^
contracts/StandardToken.sol:439:20: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
        owner.send(this.balance - SubX);
                   ^----------^
contracts/StandardToken.sol:439:9: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
        owner.send(this.balance - SubX);
        ^-----------------------------^
contracts/StandardToken.sol:465:14: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
		owner.send(this.balance);
		           ^----------^
contracts/StandardToken.sol:465:3: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
		owner.send(this.balance);
		^----------------------^
contracts/StandardToken.sol:480:9: Warning: Invoking events without "emit" prefix is deprecated.
        Migrate(msg.sender, migrationAgent, _value);
        ^-----------------------------------------^
contracts/StandardToken.sol:494:9: Warning: Invoking events without "emit" prefix is deprecated.
        Refund(msg.sender, ETHValue);
        ^--------------------------^
contracts/StandardToken.sol:14:5: Warning: No visibility specified. Defaulting to "public". 
    function migrateFrom(address _from, uint256 _value);
    ^--------------------------------------------------^
contracts/StandardToken.sol:19:3: Warning: No visibility specified. Defaulting to "public". 
  function balanceOf(address who) constant returns (uint);
  ^------------------------------------------------------^
contracts/StandardToken.sol:20:3: Warning: No visibility specified. Defaulting to "public". 
  function allowance(address owner, address spender) constant returns (uint);
  ^-------------------------------------------------------------------------^
contracts/StandardToken.sol:22:3: Warning: No visibility specified. Defaulting to "public". 
  function transfer(address to, uint value) returns (bool ok);
  ^----------------------------------------------------------^
contracts/StandardToken.sol:23:3: Warning: No visibility specified. Defaulting to "public". 
  function transferFrom(address from, address to, uint value) returns (bool ok);
  ^----------------------------------------------------------------------------^
contracts/StandardToken.sol:24:3: Warning: No visibility specified. Defaulting to "public". 
  function approve(address spender, uint value) returns (bool ok);
  ^--------------------------------------------------------------^
contracts/StandardToken.sol:107:3: Warning: No visibility specified. Defaulting to "public". 
  function transfer(address _to, uint _value) returns (bool success) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/StandardToken.sol:114:3: Warning: No visibility specified. Defaulting to "public". 
  function transferFrom(address _from, address _to, uint _value) returns (bool success) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/StandardToken.sol:124:3: Warning: No visibility specified. Defaulting to "public". 
  function balanceOf(address _owner) constant returns (uint balance) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/StandardToken.sol:128:3: Warning: No visibility specified. Defaulting to "public". 
  function approve(address _spender, uint _value) returns (bool success) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/StandardToken.sol:141:3: Warning: No visibility specified. Defaulting to "public". 
  function allowance(address _owner, address _spender) constant returns (uint remaining) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/StandardToken.sol:204:3: Warning: No visibility specified. Defaulting to "public". 
  function daoPOLSKAtokens() {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/StandardToken.sol:285:3: Warning: No visibility specified. Defaulting to "public". 
  function transfer(address _to, uint256 _value) returns (bool success) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/StandardToken.sol:298:3: Warning: No visibility specified. Defaulting to "public". 
  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/StandardToken.sol:310:3: Warning: No visibility specified. Defaulting to "public". 
  function balanceOf(address _owner) constant returns (uint256 balance) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/StandardToken.sol:314:3: Warning: No visibility specified. Defaulting to "public". 
  function approve(address _spender, uint256 _value) returns (bool success) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/StandardToken.sol:320:3: Warning: No visibility specified. Defaulting to "public". 
  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/StandardToken.sol:338:3: Warning: No visibility specified. Defaulting to "public". 
  function setTokenInformation(string _name, string _symbol) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/StandardToken.sol:349:1: Warning: No visibility specified. Defaulting to "public". 
function setChainsAddresses(address chainAd, int chainnumber) {
^ (Relevant source part starts here and spans across multiple lines).
contracts/StandardToken.sol:366:2: Warning: No visibility specified. Defaulting to "public". 
	function sendTokenAw(address StandardTokenAddress, address receiver, uint amount){
 ^ (Relevant source part starts here and spans across multiple lines).
contracts/StandardToken.sol:387:9: Warning: No visibility specified. Defaulting to "public". 
        function createDaoPOLSKAtokens(address holder) payable {
        ^ (Relevant source part starts here and spans across multiple lines).
contracts/StandardToken.sol:424:2: Warning: No visibility specified. Defaulting to "public". 
	function setBonusCreationRate(uint newRate){
 ^ (Relevant source part starts here and spans across multiple lines).
contracts/StandardToken.sol:59:3: Warning: Function state mutability can be restricted to pure
  function max64(uint64 a, uint64 b) internal constant returns (uint64) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/StandardToken.sol:63:3: Warning: Function state mutability can be restricted to pure
  function min64(uint64 a, uint64 b) internal constant returns (uint64) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/StandardToken.sol:67:3: Warning: Function state mutability can be restricted to pure
  function max256(uint256 a, uint256 b) internal constant returns (uint256) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/StandardToken.sol:71:3: Warning: Function state mutability can be restricted to pure
  function min256(uint256 a, uint256 b) internal constant returns (uint256) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/StandardToken.sol:75:3: Warning: Function state mutability can be restricted to pure
  function assert(bool assertion) internal {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/StandardToken.sol:103:3: Warning: Function state mutability can be restricted to pure
  function isToken() public constant returns (bool weAre) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/StandardToken.sol:360:3: Warning: Function state mutability can be restricted to pure
  function DAOPolskaTokenICOregulations() external returns(string wow) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/StandardToken.sol:498:1: Warning: Function state mutability can be restricted to pure
function preICOregulations() external returns(string wow) {
^ (Relevant source part starts here and spans across multiple lines).
contracts/SafeMath.sol:77:7: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
      throw;
      ^---^
contracts/SafeMath.sol:134:64: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;
                                                               ^---^
contracts/SafeMath.sol:204:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
  function daoPOLSKAtokens() {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/SafeMath.sol:211:7: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
      throw;
      ^---^
contracts/SafeMath.sol:214:7: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
      throw;
      ^---^
contracts/SafeMath.sol:223:7: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
      throw;
      ^---^
contracts/SafeMath.sol:226:7: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
      throw;
      ^---^
contracts/SafeMath.sol:330:10: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
		} else throw;
		       ^---^
contracts/SafeMath.sol:341:7: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
      throw;
      ^---^
contracts/SafeMath.sol:352:7: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
      throw;
      ^---^
contracts/SafeMath.sol:368:3: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
		throw;
		^---^
contracts/SafeMath.sol:389:23: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (!funding) throw;
                      ^---^
contracts/SafeMath.sol:392:29: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (msg.value == 0) throw;
                            ^---^
contracts/SafeMath.sol:395:11: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
          throw;
          ^---^
contracts/SafeMath.sol:403:3: Warning: Use of the "var" keyword is deprecated.
	 var numTokensRAW = msg.value;
	 ^--------------^
contracts/SafeMath.sol:405:9: Warning: Use of the "var" keyword is deprecated.
        var numTokens = msg.value * CreationRate;
        ^-----------^
contracts/SafeMath.sol:432:20: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
	if(funding==true) throw;
	                  ^---^
contracts/SafeMath.sol:433:36: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
		 	if (!owner.send(this.balance)) throw;
		 	                               ^---^
contracts/SafeMath.sol:437:33: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
	      if (msg.sender != owner) throw;
	                               ^---^
contracts/SafeMath.sol:442:33: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
	      if (msg.sender != owner) throw;
	                               ^---^
contracts/SafeMath.sol:447:33: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
	      if (msg.sender != owner) throw;
	                               ^---^
contracts/SafeMath.sol:451:43: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
	      if (msg.sender != migrationMaster) throw;
	                                         ^---^
contracts/SafeMath.sol:458:56: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (block.number <= fundingEndBlock+8*oneweek) throw;
                                                       ^---^
contracts/SafeMath.sol:469:27: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (migratestate) throw;
                          ^---^
contracts/SafeMath.sol:473:26: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (_value == 0) throw;
                         ^---^
contracts/SafeMath.sol:474:44: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (_value > balances[msg.sender]) throw;
                                           ^---^
contracts/SafeMath.sol:485:22: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (funding) throw;
                     ^---^
contracts/SafeMath.sol:486:27: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (!refundstate) throw;
                          ^---^
contracts/SafeMath.sol:488:9: Warning: Use of the "var" keyword is deprecated.
        var DAOPLTokenValue = balances[msg.sender];
        ^-----------------^
contracts/SafeMath.sol:489:9: Warning: Use of the "var" keyword is deprecated.
        var ETHValue = balancesRAW[msg.sender];
        ^----------^
contracts/SafeMath.sol:490:28: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (ETHValue == 0) throw;
                           ^---^
contracts/SafeMath.sol:75:3: Warning: This declaration shadows a builtin symbol.
  function assert(bool assertion) internal {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/SafeMath.sol:370:3: Warning: Variable is declared as a storage pointer. Use an explicit "storage" keyword to silence this warning.
		sendTokenAway t = transfers[numTransfers];
		^-------------^
contracts/SafeMath.sol:9:28: Warning: Functions in interfaces should be declared external.
interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }
                           ^-----------------------------------------------------------------------------------------------^
contracts/SafeMath.sol:110:5: Warning: Invoking events without "emit" prefix is deprecated.
    Transfer(msg.sender, _to, _value);
    ^-------------------------------^
contracts/SafeMath.sol:120:5: Warning: Invoking events without "emit" prefix is deprecated.
    Transfer(_from, _to, _value);
    ^--------------------------^
contracts/SafeMath.sol:137:5: Warning: Invoking events without "emit" prefix is deprecated.
    Approval(msg.sender, _spender, _value);
    ^------------------------------------^
contracts/SafeMath.sol:263:9: Warning: Invoking events without "emit" prefix is deprecated.
        Burn(msg.sender, _value);
        ^----------------------^
contracts/SafeMath.sol:281:9: Warning: Invoking events without "emit" prefix is deprecated.
        Burn(_from, _value);
        ^-----------------^
contracts/SafeMath.sol:293:7: Warning: Invoking events without "emit" prefix is deprecated.
      Transfer(msg.sender, _to, _value);
      ^-------------------------------^
contracts/SafeMath.sol:305:7: Warning: Invoking events without "emit" prefix is deprecated.
      Transfer(_from, _to, _value);
      ^--------------------------^
contracts/SafeMath.sol:316:5: Warning: Invoking events without "emit" prefix is deprecated.
    Approval(msg.sender, _spender, _value);
    ^------------------------------------^
contracts/SafeMath.sol:328:9: Warning: Invoking events without "emit" prefix is deprecated.
        receivedEther(msg.sender, msg.value);
        ^----------------------------------^
contracts/SafeMath.sol:346:5: Warning: Invoking events without "emit" prefix is deprecated.
    UpdatedTokenInformation(name, symbol);
    ^-----------------------------------^
contracts/SafeMath.sol:412:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(0, holder, numTokens);
        ^----------------------------^
contracts/SafeMath.sol:421:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(0, migrationMaster, additionalTokens);
        ^--------------------------------------------^
contracts/SafeMath.sol:433:21: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
		 	if (!owner.send(this.balance)) throw;
		 	                ^----------^
contracts/SafeMath.sol:439:20: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
        owner.send(this.balance - SubX);
                   ^----------^
contracts/SafeMath.sol:439:9: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
        owner.send(this.balance - SubX);
        ^-----------------------------^
contracts/SafeMath.sol:465:14: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
		owner.send(this.balance);
		           ^----------^
contracts/SafeMath.sol:465:3: Warning: Failure condition of 'send' ignored. Consider using 'transfer' instead.
		owner.send(this.balance);
		^----------------------^
contracts/SafeMath.sol:480:9: Warning: Invoking events without "emit" prefix is deprecated.
        Migrate(msg.sender, migrationAgent, _value);
        ^-----------------------------------------^
contracts/SafeMath.sol:494:9: Warning: Invoking events without "emit" prefix is deprecated.
        Refund(msg.sender, ETHValue);
        ^--------------------------^
contracts/SafeMath.sol:14:5: Warning: No visibility specified. Defaulting to "public". 
    function migrateFrom(address _from, uint256 _value);
    ^--------------------------------------------------^
contracts/SafeMath.sol:19:3: Warning: No visibility specified. Defaulting to "public". 
  function balanceOf(address who) constant returns (uint);
  ^------------------------------------------------------^
contracts/SafeMath.sol:20:3: Warning: No visibility specified. Defaulting to "public". 
  function allowance(address owner, address spender) constant returns (uint);
  ^-------------------------------------------------------------------------^
contracts/SafeMath.sol:22:3: Warning: No visibility specified. Defaulting to "public". 
  function transfer(address to, uint value) returns (bool ok);
  ^----------------------------------------------------------^
contracts/SafeMath.sol:23:3: Warning: No visibility specified. Defaulting to "public". 
  function transferFrom(address from, address to, uint value) returns (bool ok);
  ^----------------------------------------------------------------------------^
contracts/SafeMath.sol:24:3: Warning: No visibility specified. Defaulting to "public". 
  function approve(address spender, uint value) returns (bool ok);
  ^--------------------------------------------------------------^
contracts/SafeMath.sol:107:3: Warning: No visibility specified. Defaulting to "public". 
  function transfer(address _to, uint _value) returns (bool success) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/SafeMath.sol:114:3: Warning: No visibility specified. Defaulting to "public". 
  function transferFrom(address _from, address _to, uint _value) returns (bool success) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/SafeMath.sol:124:3: Warning: No visibility specified. Defaulting to "public". 
  function balanceOf(address _owner) constant returns (uint balance) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/SafeMath.sol:128:3: Warning: No visibility specified. Defaulting to "public". 
  function approve(address _spender, uint _value) returns (bool success) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/SafeMath.sol:141:3: Warning: No visibility specified. Defaulting to "public". 
  function allowance(address _owner, address _spender) constant returns (uint remaining) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/SafeMath.sol:204:3: Warning: No visibility specified. Defaulting to "public". 
  function daoPOLSKAtokens() {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/SafeMath.sol:285:3: Warning: No visibility specified. Defaulting to "public". 
  function transfer(address _to, uint256 _value) returns (bool success) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/SafeMath.sol:298:3: Warning: No visibility specified. Defaulting to "public". 
  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/SafeMath.sol:310:3: Warning: No visibility specified. Defaulting to "public". 
  function balanceOf(address _owner) constant returns (uint256 balance) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/SafeMath.sol:314:3: Warning: No visibility specified. Defaulting to "public". 
  function approve(address _spender, uint256 _value) returns (bool success) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/SafeMath.sol:320:3: Warning: No visibility specified. Defaulting to "public". 
  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/SafeMath.sol:338:3: Warning: No visibility specified. Defaulting to "public". 
  function setTokenInformation(string _name, string _symbol) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/SafeMath.sol:349:1: Warning: No visibility specified. Defaulting to "public". 
function setChainsAddresses(address chainAd, int chainnumber) {
^ (Relevant source part starts here and spans across multiple lines).
contracts/SafeMath.sol:366:2: Warning: No visibility specified. Defaulting to "public". 
	function sendTokenAw(address StandardTokenAddress, address receiver, uint amount){
 ^ (Relevant source part starts here and spans across multiple lines).
contracts/SafeMath.sol:387:9: Warning: No visibility specified. Defaulting to "public". 
        function createDaoPOLSKAtokens(address holder) payable {
        ^ (Relevant source part starts here and spans across multiple lines).
contracts/SafeMath.sol:424:2: Warning: No visibility specified. Defaulting to "public". 
	function setBonusCreationRate(uint newRate){
 ^ (Relevant source part starts here and spans across multiple lines).
contracts/SafeMath.sol:59:3: Warning: Function state mutability can be restricted to pure
  function max64(uint64 a, uint64 b) internal constant returns (uint64) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/SafeMath.sol:63:3: Warning: Function state mutability can be restricted to pure
  function min64(uint64 a, uint64 b) internal constant returns (uint64) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/SafeMath.sol:67:3: Warning: Function state mutability can be restricted to pure
  function max256(uint256 a, uint256 b) internal constant returns (uint256) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/SafeMath.sol:71:3: Warning: Function state mutability can be restricted to pure
  function min256(uint256 a, uint256 b) internal constant returns (uint256) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/SafeMath.sol:75:3: Warning: Function state mutability can be restricted to pure
  function assert(bool assertion) internal {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/SafeMath.sol:103:3: Warning: Function state mutability can be restricted to pure
  function isToken() public constant returns (bool weAre) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/SafeMath.sol:360:3: Warning: Function state mutability can be restricted to pure
  function DAOPolskaTokenICOregulations() external returns(string wow) {
  ^ (Relevant source part starts here and spans across multiple lines).
contracts/SafeMath.sol:498:1: Warning: Function state mutability can be restricted to pure
function preICOregulations() external returns(string wow) {
^ (Relevant source part starts here and spans across multiple lines).
assets/NormalAttacker.sol:5:3: Warning: No visibility specified. Defaulting to "public". 
  function() payable {
  ^ (Relevant source part starts here and spans across multiple lines).
assets/ReentrancyAttacker.sol:8:7: Warning: Return value of low-level calls not used.
      msg.sender.call(bytes4(255));
      ^--------------------------^
assets/ReentrancyAttacker.sol:5:3: Warning: No visibility specified. Defaulting to "public". 
  function() payable {
  ^ (Relevant source part starts here and spans across multiple lines).
>> Fuzz daoPOLSKAtokens
** Write stats: 0.039163
** Write stats: 5.00519
** Write stats: 10.005
** Write stats: 15.0008
** Write stats: 20.0055
** Write stats: 25.0028
** Write stats: 30.0005
** Write stats: 35.0053
** Write stats: 40.0004
** Write stats: 45.0019
** Write stats: 50.0047
** Write stats: 55.0046
** Write stats: 60.0045
** Write stats: 65.0042
** Write stats: 70.0092
** Write stats: 75.0119
** Write stats: 80.0024
** Write stats: 85.0059
** Write stats: 90.0158
** Write stats: 95.021
** Write stats: 100.022
** Write stats: 105.015
** Write stats: 110.001
** Write stats: 115.003
** Write stats: 120.017
** Write stats: 125.008
** Write stats: 130.017
** Write stats: 135.014
** Write stats: 140.026
** Write stats: 145.021
** Write stats: 150.011
** Write stats: 155.006
** Write stats: 160.012
** Write stats: 165.028
** Write stats: 170.009
** Write stats: 175.005
** Write stats: 180.028
** Write stats: 185.022
** Write stats: 190.016
** Write stats: 195.028
** Write stats: 198.134
>> Fuzz StandardToken
** Write stats: 0.008203
** Write stats: 5.00313
** Write stats: 10.0025
** Write stats: 15.0038
** Write stats: 20.0058
** Write stats: 25.0074
** Write stats: 30.0072
** Write stats: 35.0018
** Write stats: 40.0031
** Write stats: 45.0023
** Write stats: 50.0073
** Write stats: 55.0069
** Write stats: 60.0022
** Write stats: 65.0062
** Write stats: 70.0008
** Write stats: 75.0091
** Write stats: 80.0003
** Write stats: 85.0131
** Write stats: 90.0051
** Write stats: 95.0066
** Write stats: 100.015
** Write stats: 105.005
** Write stats: 110.015
** Write stats: 115.004
** Write stats: 120.004
** Write stats: 125.01
** Write stats: 130.001
** Write stats: 135.001
** Write stats: 140.016
** Write stats: 145.028
** Write stats: 150.015
** Write stats: 155.001
** Write stats: 160.007
** Write stats: 165.002
** Write stats: 170.008
** Write stats: 175.006
** Write stats: 180.007
** Write stats: 185.019
** Write stats: 190.005
** Write stats: 195.015
** Write stats: 198.06
>> Fuzz SafeMath
** Write stats: 0.002797
** Write stats: 5.00005
** Write stats: 10.0001
** Write stats: 15.0001
** Write stats: 20.0001
** Write stats: 25
** Write stats: 30.0001
** Write stats: 35
** Write stats: 40
** Write stats: 45
** Write stats: 50
** Write stats: 55
** Write stats: 60.0001
** Write stats: 65.0001
** Write stats: 70.0001
** Write stats: 75
** Write stats: 80.0001
** Write stats: 85
** Write stats: 90.0005
** Write stats: 95
** Write stats: 100
** Write stats: 105
** Write stats: 110
** Write stats: 115
** Write stats: 120
** Write stats: 125
** Write stats: 130
** Write stats: 135
** Write stats: 140
** Write stats: 145
** Write stats: 150
** Write stats: 155
** Write stats: 160
** Write stats: 165
** Write stats: 170
** Write stats: 175
** Write stats: 180
** Write stats: 185
** Write stats: 190
** Write stats: 195
** Write stats: 198.001
